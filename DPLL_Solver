// Code for DPLL by Saumya Shah


#include <algorithm>
#include <cmath>
#include <cstdint>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

enum Sat
{
    satisfied,   // when the assignment gets satisfied
    unsatisfied, // when the assignment doesn't get satisfied
    normal,      // whenthe code exits normally when no satisfing assignment is found
    completed
};


//class for the representation of boolean formula
class BoolFormula
{
    public:
    vector<int> literal;
    vector<int> literal_freq;
    vector<int> literal_pol;
    vector<vector<int>> clauses;

    BoolFormula(){}
    BoolFormula(const BoolFormula &f)
    {
        literal=f.literal;
        literal_freq=f.literal_freq;
        literal_pol=f.literal_pol;
        clauses=f.clauses;
    }

};

class DPLLSolver
{
    private:
        BoolFormula formula;
        int literal_count;
        int clause_count;
        int unit_propagate(BoolFormula &);
        int DPLL(BoolFormula &);
        int transform(BoolFormula &, int); // apply the value of the literal in each clause
        int show_result(BoolFormula &,int);// displays the result

    public:
        DPLLSolver() {}
        void initialize();
        void solve(); 

};

void DPLLSolver::initialize()
{
    char c;
    string s;
    while(true)
    {
        cin>>c;
        if(c=='c')
        {
            getline(cin,s);
        }
        else
        {
            cin>>s;
            break;
        }

    }

    cin>>literal_count;
    cin>>clause_count;

    formula.literal.clear();
    formula.literal.resize(literal_count,-1);
    formula.clauses.clear();
    formula.clauses.resize(clause_count);
    formula.literal_freq.clear();
    formula.literal_freq.resize(literal_count, 0);
    formula.literal_pol.clear();
    formula.literal_pol.resize(literal_count, 0);

    int literalVar;  //maybe only +ve and -ve or 0 

    for(int idx=0;idx<clause_count;idx++)
    {
        while(true)
        {
            cin>>literalVar;
            if(literalVar>0)
            {
                formula.clauses[idx].push_back(2*literalVar - 1);
                formula.literal_freq[literalVar - 1]++;
                formula.literal_pol[literalVar - 1]++;
            }
            else if(literalVar<0)
            {
                formula.clauses[idx].push_back(2 * ((-1) * literalVar - 1) + 1);
                formula.literal_freq[-1 - literalVar]++;
                formula.literal_pol[- 1 - literalVar - 1]--;
            }
            else{
                break;
            }

        }
    }
}

int DPLLSolver::unit_propagate(BoolFormula &f)
{
    bool unit_cause_found=false; //stores whether the current iteration has a unit clause
    if(f.clauses.size()==0)
    {
        return Sat::satisfied;
    }
    do
    {
        /* code */
        unit_cause_found=false;
        for(int idx=0;idx<f.clauses.size();idx++)
        {
            if(f.clauses.size()==1)
            {
                unit_cause_found=true;
                f.literal[f.clauses[idx][0]/2]=f.clauses[idx][0]%2;
                f.literal_freq[f.clauses[idx][0] / 2] = -1;
                int result=transform(f,f.clauses[idx][0]/2);

                if(result==Sat::satisfied || result==Sat::unsatisfied)
                {
                    return result;
                }
                break;
            }
            else if(f.clauses.size()==0)
            {
                return Sat::unsatisfied;
            }

        }
    } while (unit_cause_found);
    return Sat::normal;
    
}


void DPLLSolver::solve()
{
    int result=DPLL(formula);
    if(result==Sat::normal)
    {
        show_result(formula,Sat::unsatisfied);
    }
}


int DPLLSolver::show_result(BoolFormula &f,int result)
{
    if(result==Sat::unsatisfied)
    {
        cout<<"SAT "<<endl;

        for(int idx=0;idx<f.literal.size();idx++)
        {
            if(idx!=0)
            {
                cout<<"  ";
            }
            if(f.literal[idx] != -1)
            {
                cout << pow(-1, f.literal[idx]) * (idx + 1);
            }
            else
            {
                cout<< idx + 1;
            }
        }
        cout<<" 0 ";
    }
    else
    {
        cout<<" UNSAT ";
    }
}


int DPLLSolver::DPLL(BoolFormula &f)
{
    int result=unit_propagate(f);
    if(result==Sat::satisfied)
    {
        show_result(f,result);
        return Sat::completed;
    }
    else if(result == Sat::unsatisfied)
    {
        return Sat::normal;
    }

    int i = distance(f.literal_freq.begin(),max_element(f.literal_freq.begin(),f.literal_freq.end()));

    for (int idx=0;idx<2;idx++)
    {
        BoolFormula new_f = f;
        if(new_f.literal_pol[i] > 0)
        {
            new_f.literal_pol[i] = idx;

        }
        else
        {
            new_f.literal_pol[i] = (idx + 1) % 2;

        }
        new_f.literal_freq[i] = -1;

        int transform_result = transform(new_f,i);
        if(transform_result==Sat::satisfied)
        {
            show_result(new_f,transform_result);
            return Sat::completed;
        }
        else if(transform_result == Sat::unsatisfied)
        {
            continue;
        }
        int DPLL_result = DPLL(new_f);
        if(DPLL_result == Sat::completed)
        {
            return DPLL_result;
        }
    }
    return Sat::normal;
}

int DPLLSolver::transform(BoolFormula &f, int literal_apply)
{
    int value_literal = f.literal[literal_apply];

    for(int idx=0;idx<f.clauses.size();idx++)
    {
        for(int j=0;j<f.clauses[idx].size();j++)
        {
            if((2 * literal_apply + value_literal) == f.clauses[idx][j])
            {
                f.clauses.erase(f.clauses.begin() + idx);
                idx--;
                if (f.clauses.size() == 0) // if all clauses have been removed, the formula is satisfied
                {
                    return Sat::satisfied;
                }
                break;
            }
            else if(f.clauses[idx][j] / 2 ==literal_apply)
            {
                f.clauses[idx].erase(f.clauses[idx].begin() +j);
                j--;

                if (f.clauses[idx].size() ==0)
                {
                    return Sat::unsatisfied;
                }
                break;
            }
        }
    }
return Sat::normal;
}

int main()
{
    DPLLSolver solver;
    solver.initialize();
    solver.solve();
    return 0;
}



